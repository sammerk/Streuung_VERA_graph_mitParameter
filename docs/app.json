[{"name":"app.R","content":"# Task Name: Streuung_VERA_graph ######################\n\nlibrary(shiny)\nlibrary(miniUI)\nlibrary(shinyjs)\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(shinycssloaders)\nlibrary(hrbrthemes)\nlibrary(viridis)\nset.seed(25051982)\n\n## Googlesheets Connection Setup ###############################################\noptions(\n  # whenever there is one account token found, use the cached token\n  gargle_oauth_email = TRUE,\n  # specify auth tokens should be stored in a hidden directory \".secrets\"\n  gargle_oauth_cache = \".secrets/\"\n)\n\ngs4_auth()\n\n\n## UI #########################################################################\nui <- miniPage(\n  useShinyjs(),\n  miniContentPanel(\n    wellPanel(\n      h4(\"Aufgabe: Heterogene Klassen VERA\"),\n      htmlOutput(\"prompt_task\")\n    ),\n    wellPanel(\n      plotOutput(\"plot\")\n    ),\n    shinyjs::hidden(wellPanel(id = \"feedbackpanel_task\",\n                              withSpinner(\n                                htmlOutput(\"feedback_task\"),\n                                proxy.height = \"50px\",\n                                color = \"#8cd000\"))\n    ),\n    wellPanel(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"send\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus\"))\n     # , verbatimTextOutput(\"debug\")\n    )      \n  )  \n)\n\n\n\nserver <- function(input, output, session) {\n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n\n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  distribution_beta <- \n      function (n, shape1, shape2, ncp = 0, random = FALSE, ...) \n    {\n      if (random) {\n        stats::rbeta(n, shape1, shape2, ncp = ncp)\n      }\n      else {\n        stats::qbeta(stats::ppoints(n), shape1, shape2, ncp = ncp, \n                     ...)\n      }\n    }\n  \n  ## Data for task  ####\n  classsizes_random <- reactive({\n    input$new_task\n    sample(17:32, 8, replace = T)\n  })\n  classnames_random <- reactive({\n    input$new_task\n    sample(LETTERS[1:8], 8)\n  })\n  \n  \n  classdata <- reactive({\n    input$new_task\n    \n    tibble(\n      Performance = c(distribution_beta(classsizes_random()[1], 0004, 0004), # normal\n                      distribution_beta(classsizes_random()[2], 00.7, 0002), # right\n                      distribution_beta(classsizes_random()[3], 0001.5, 00.8), # left\n                      distribution_beta(classsizes_random()[4], 1.05, 0.95), # unif\n                      distribution_beta(classsizes_random()[5], 0.95, 1.05), # unif\n                      distribution_beta(classsizes_random()[6], 005, 5), # lepto\n                      distribution_beta(classsizes_random()[7], 20, 5), # lepto right\n                      distribution_beta(classsizes_random()[8], sample(c(.2, .3), 1), sample(c(.2, .3), 1))), # u\n      Klasse = c(rep(paste(\"Klasse \", classnames_random()[1]), classsizes_random()[1]),\n                 rep(paste(\"Klasse \", classnames_random()[2]), classsizes_random()[2]),\n                 rep(paste(\"Klasse \", classnames_random()[3]), classsizes_random()[3]),\n                 rep(paste(\"Klasse \", classnames_random()[4]), classsizes_random()[4]),\n                 rep(paste(\"Klasse \", classnames_random()[5]), classsizes_random()[5]),\n                 rep(paste(\"Klasse \", classnames_random()[6]), classsizes_random()[6]),\n                 rep(paste(\"Klasse \", classnames_random()[7]), classsizes_random()[7]),\n                 rep(paste(\"Klasse \", classnames_random()[8]), classsizes_random()[8])\n      )\n    ) %>% \n    mutate(\n      Kompetenzstufe = case_when(Performance < .2 ~ \"1 = niedrigste Stufe\",\n                                 Performance < .4 ~ \"2\",\n                                 Performance < .6 ~ \"3\",\n                                 Performance < .8 ~ \"4\",\n                                 T ~ \"5 = höchste Stufe\"),\n      Kompetenzstufe = factor(Kompetenzstufe, \n                              levels = c(\"5 = höchste Stufe\",\n                                         \"4\",\n                                         \"3\",\n                                         \"2\",\n                                         \"1 = niedrigste Stufe\")\n      )\n    )\n    \n  })\n  \n  output$plot <- renderPlot({\n    ggplot(classdata(), aes(Klasse, fill = Kompetenzstufe)) +\n      geom_bar(color = \"#00000000\") +\n      scale_fill_viridis_d() +\n      theme_ipsum() + \n      ylab(\"Anzahl Schüler*innen\") + \n      coord_flip() +\n      ggtitle(\"Kompetenzstufenbelegung\", \"in acht Klassen\")\n  })\n  \n # output$debug <- renderPrint({\n #   classdata()\n # })\n  \n  \n  \n  ## Render UI for Answers ###\n  output$ui_answers_task <- renderUI({\n    input$reshuffle_task\n    input$new_task\n    radioButtons(\n      \"answers_task\",\n      \"Bitte ankreuzen\",\n      paste(\"Klasse \", LETTERS[1:8]),\n      selected = character(0)\n    )\n  })\n  \n  ## Prompt task \n  output$prompt_task <- renderText({\n    \"<b>Ein Schulleiter einer großen Grundschule hat folgende Ergebnisse der Vergleichsarbeiten in Klasse 3 (VERA 3) vorliegen. Er fragt sich: Welche der Klassen weist die größte Heterogenität (Streuung) auf? <\/b><br>\"\n  }) \n  \n  ## Correct answers ###\n  correct_answers_task <- reactive({\n      paste(\"Klasse \", classnames_random()[8])\n  })\n  \n  ## Feedback task  ####\n  output$feedback_task <- renderText({   \n    \n    if(is.null(input$answers_task)){\n      HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                 paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                 \"<br><i>\",\n                 learnr::random_encouragement(),\n                 \"<\/i>\"))\n    }else{\n      if(setequal(correct_answers_task(), input$answers_task)){\n        paste(\"Richtig!\", learnr::random_praise())}else{\n          HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                     paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                     \"<br><i>\",\n                     learnr::random_encouragement(),\n                     \"<\/i>\"))\n        }\n    }\n  })\n  \n  ## Show and Hide Feedback ####################################################\n  \n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n\n  \n  ## URL Variable fetching #####################################################\n  url_vars <- reactive({\n    parseQueryString(session$clientData$url_search)\n  })\n  \n  ## Usage Logging #############################################################\n  observeEvent(input$show_feedback_task, {\n    if(!is.null(input$answers_task)){\n      sheet_append(\"14yNT-c11reOPS-Gt2cHnNoa9HsnkhYvkUYgytu8DAhg\",\n                   tibble(PID = ifelse(is.null(url_vars()$PID), \n                                       \"PID is missing\", #to keep ncol constant\n                                       url_vars()$PID), # Person identifier from URL\n                          task_name = \"Streuung_VERA_graph\",\n                          task_version = \"repeatable_and_parametrized\",\n                          time = Sys.time(),\n                          timezone = Sys.timezone(),\n                          new_task = as.numeric(input$new_task),\n                          reshuffle_task = as.numeric(input$reshuffle_task),\n                          result = # correct or wrong sol. provided by student\n                            case_when(is.null(input$answers_task) ~ \n                                        \"false_solution\",\n                                      setequal(correct_answers_task(), \n                                               input$answers_task) ~ \n                                        \"correct_solution\",\n                                      TRUE ~  \"false_solution\")\n                   ),\n                   sheet = 1)\n    }\n  })\n}\n\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)\n","type":"text"}]
